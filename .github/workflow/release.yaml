name: Release depclean

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - npm/depclean/package.json # Please only commit this file, so we don't need to wait for all the other CI jobs to finish.

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - uses: taiki-e/checkout-action@v1

      - name: Check version changes
        uses: EndBug/version-check@v2
        id: version
        with:
          static-checking: localIsNew
          file-url: https://unpkg.com/depclean@latest/package.json
          file-name: npm/depclean/package.json

      - name: Set version name
        if: steps.version.outputs.changed == 'true'
        run: |
          echo "Version change found! New version: ${{ steps.version.outputs.version }} (${{ steps.version.outputs.version_type }})"

  build:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64-gnu

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64-gnu

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            code-target: linux-x64-musl

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            code-target: linux-arm64-musl

          - os: macos-latest
            target: x86_64-apple-darwin
            code-target: darwin-x64

          - os: macos-latest
            target: aarch64-apple-darwin
            code-target: darwin-arm64

    name: Package ${{ matrix.code-target }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: taiki-e/checkout-action@v1

      - name: Install cross
        uses: taiki-e/install-action@cross

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: release-${{ matrix.target }}

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        shell: bash
        run: |
          # Need to support 16kb-aligned pages for aarch64 systems,
          # Asahi Linux & Raspberry Pi OS use a 16k page size.
          case ${{ matrix.target }} in
            aarch64-*) export JEMALLOC_SYS_WITH_LG_PAGE=16 ;;
          esac;
          cross build --release --target=${{ matrix.target }} --bin depclean

      # The binaries are zipped to fix permission loss https://github.com/actions/upload-artifact#permission-loss
      - name: Archive Binaries
        if: runner.os == 'Windows'
        run: |
          DEPCLEAN_BIN_NAME=depclean-${{ matrix.code-target }}
          mv target/${{ matrix.target }}/release/depclean.exe $DEPCLEAN_BIN_NAME.exe
          7z a $DEPCLEAN_BIN_NAME.zip $DEPCLEAN_BIN_NAME.exe

      # The binaries are zipped to fix permission loss https://github.com/actions/upload-artifact#permission-loss
      - name: Archive Binaries
        if: runner.os != 'Windows'
        run: |
          DEPCLEAN_BIN_NAME=depclean-${{ matrix.code-target }}
          mv target/${{ matrix.target }}/release/depclean $DEPCLEAN_BIN_NAME
          tar czf $DEPCLEAN_BIN_NAME.tar.gz $DEPCLEAN_BIN_NAME

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: binaries-${{ matrix.code-target }}
          path: |
            *.zip
            *.tar.gz

  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # for softprops/action-gh-release@v1
      id-token: write # for `npm publish --provenance`
    outputs:
      version: ${{ steps.run.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for changelog

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Unzip
        uses: montudor/action-zip@v1
        with:
          args: unzip -qq *.zip -d .

      - name: Untar
        run: ls *.gz | xargs -i tar xf {}

      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          registry-url: 'https://registry.npmjs.org'

      - name: Generate npm packages
        run: |
          node npm/depclean/scripts/gen.mjs
          cat npm/depclean/package.json
          for package in npm/depclean*; do cat $package/package.json ; echo ; done

      - name: Publish npm packages as latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        # NOTE: The trailing slash on $package/ changes it to publishing the directory
        run: |
          for package in npm/depclean*
          do
            npm publish $package/ --tag latest --provenance --access public
            echo '----'
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.run.outputs.CHANGELOG }}
          draft: true
          files: depclean-*
          name: depclean v${{ steps.run.outputs.VERSION }}
          tag_name: depclean_v${{ steps.run.outputs.VERSION }}
          fail_on_unmatched_files: true
          target_commitish: ${{ github.sha }}

      - name: wait 1 minute for smoke test
        run: sleep 60s

  smoke:
    needs: publish
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
          - os: ubuntu-latest
            container: node:18-alpine # musl
          - os: macos-latest
    name: Smoke Test ${{ matrix.os }} ${{ matrix.container }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Test
        run: |
          touch test.js
          ldd --version || true
          npx depclean@${{ needs.check.outputs.version }} ./test.js
